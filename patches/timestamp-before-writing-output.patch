diff --git a/src/rec/aaoRecord.c b/src/rec/aaoRecord.c
index 318e29d..634f128 100644
--- a/src/rec/aaoRecord.c
+++ b/src/rec/aaoRecord.c
@@ -165,12 +165,22 @@ static long process(aaoRecord *prec)
         return S_dev_missingSup;
     }
 
+    if ( !pact ) {
+	/* Update the timestamp before writing output values so it
+	 * will be uptodate if any downstream records fetch it via TSEL */
+	recGblGetTimeStamp(prec);
+    }
+
     status = writeValue(prec); /* write the data */
     if (!pact && prec->pact) return 0;
     prec->pact = TRUE;
 
+    if ( pact ) {
+    	/* Update timestamp again for asynchronous devices */
+	recGblGetTimeStamp(prec);
+    }
+
     prec->udf = FALSE;
-    recGblGetTimeStamp(prec);
 
     monitor(prec);
     /* process the forward scan link record */
diff --git a/src/rec/aoRecord.c b/src/rec/aoRecord.c
index a6dfb2c..59cd864 100644
--- a/src/rec/aoRecord.c
+++ b/src/rec/aoRecord.c
@@ -199,6 +199,10 @@ static long process(aoRecord *prec)
                 }
 		if(!status) convert(prec, value);
 		prec->udf = isnan(prec->val);
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	if ( prec->tpro >= 2 )
@@ -236,7 +240,10 @@ static long process(aoRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+		/* Update timestamp again for asynchronous devices */
+		recGblGetTimeStamp(prec);
+	}
 
 	/* check event list */
 	monitor(prec);
diff --git a/src/rec/boRecord.c b/src/rec/boRecord.c
index cfd98c0..080cb55 100644
--- a/src/rec/boRecord.c
+++ b/src/rec/boRecord.c
@@ -217,6 +217,10 @@ static long process(boRecord *prec)
 			if(prec->val==0) prec->rval = 0;
 			else prec->rval = prec->mask;
 		} else prec->rval = (epicsUInt32)prec->val;
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	if ( prec->tpro >= 2 )
@@ -258,7 +262,11 @@ static long process(boRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+	    /* Update timestamp again for asynchronous devices */
+	    recGblGetTimeStamp(prec);
+	}
+
 	if((prec->val==1) && (prec->high>0)){
 	    myCallback *pcallback;
 	    pcallback = (myCallback *)(prec->rpvt);
diff --git a/src/rec/calcoutRecord.c b/src/rec/calcoutRecord.c
index 668f23c..0f4a53d 100644
--- a/src/rec/calcoutRecord.c
+++ b/src/rec/calcoutRecord.c
@@ -210,6 +210,7 @@ static long process(calcoutRecord *prec)
 {
     rpvtStruct *prpvt = prec->rpvt;
     int doOutput;
+	unsigned char    pact=prec->pact;
 
     if (!prec->pact) {
         prec->pact = TRUE;
@@ -230,6 +231,12 @@ static long process(calcoutRecord *prec)
 			epicsThreadGetNameSelf(), prec->name, prec->val );
 
         checkAlarms(prec);
+
+	if ( !pact ) {
+	    /* Update the timestamp before writing output values so it
+	     * will be uptodate if any downstream records fetch it via TSEL */
+	    recGblGetTimeStamp(prec);
+	}
         /* check for output link execution */
         switch (prec->oopt) {
         case calcoutOOPT_Every_Time:
@@ -258,7 +265,6 @@ static long process(calcoutRecord *prec)
         if (doOutput) {
             if (prec->odly > 0.0) {
                 prec->dlya = 1;
-                recGblGetTimeStamp(prec);
                 db_post_events(prec, &prec->dlya, DBE_VALUE);
                 callbackRequestProcessCallbackDelayed(&prpvt->doOutCb,
                         prec->prio, prec, (double)prec->odly);
@@ -270,11 +276,12 @@ static long process(calcoutRecord *prec)
                 prec->pact = TRUE;
             }
         }
-        recGblGetTimeStamp(prec);
     } else { /* pact == TRUE */
+	/* Update timestamp again for asynchronous devices */
+	recGblGetTimeStamp(prec);
+
         if (prec->dlya) {
             prec->dlya = 0;
-            recGblGetTimeStamp(prec);
             db_post_events(prec, &prec->dlya, DBE_VALUE);
             /* Make pact FALSE for asynchronous device support*/
             prec->pact = FALSE;
@@ -283,7 +290,6 @@ static long process(calcoutRecord *prec)
             prec->pact = TRUE;
         } else {/*Device Support is asynchronous*/
             writeValue(prec);
-            recGblGetTimeStamp(prec);
         }
     }
     monitor(prec);
diff --git a/src/rec/longoutRecord.c b/src/rec/longoutRecord.c
index 5499271..b5f9c07 100644
--- a/src/rec/longoutRecord.c
+++ b/src/rec/longoutRecord.c
@@ -148,6 +148,10 @@ static long process(longoutRecord *prec)
 			value = prec->val;
 		}
 		if (!status) convert(prec,value);
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	if ( prec->tpro >= 2 )
@@ -183,7 +187,10 @@ static long process(longoutRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+	    /* Update timestamp again for asynchronous devices */
+	    recGblGetTimeStamp(prec);
+	}
 
 	/* check event list */
 	monitor(prec);
diff --git a/src/rec/mbboDirectRecord.c b/src/rec/mbboDirectRecord.c
index 8ec8a3a..01f2ad2 100644
--- a/src/rec/mbboDirectRecord.c
+++ b/src/rec/mbboDirectRecord.c
@@ -195,6 +195,10 @@ static long process(mbboDirectRecord *prec)
 	}
 	/* convert val to rval */
 	convert(prec);
+
+	/* Update the timestamp before writing output values so it
+	 * will be uptodate if any downstream records fetch it via TSEL */
+        recGblGetTimeStamp(prec);
     }
 
 CONTINUE:
@@ -224,7 +228,11 @@ CONTINUE:
     if ( !pact && prec->pact ) return(0);
     prec->pact = TRUE;
 
-    recGblGetTimeStamp(prec);
+    if ( pact ) {
+    	/* Update timestamp again for asynchronous devices */
+        recGblGetTimeStamp(prec);
+    }
+
     /* check event list */
     monitor(prec);
     /* process the forward scan link record */
diff --git a/src/rec/mbboRecord.c b/src/rec/mbboRecord.c
index ab885b0..e474796 100644
--- a/src/rec/mbboRecord.c
+++ b/src/rec/mbboRecord.c
@@ -224,6 +224,10 @@ static long process(mbboRecord *prec)
 	}
 	/* convert val to rval */
 	convert(prec);
+
+	/* Update the timestamp before writing output values so it
+	 * will be uptodate if any downstream records fetch it via TSEL */
+        recGblGetTimeStamp(prec);
     }
 
 CONTINUE:
@@ -262,7 +266,11 @@ CONTINUE:
     if ( !pact && prec->pact ) return(0);
     prec->pact = TRUE;
 
-    recGblGetTimeStamp(prec);
+    if ( pact ) {
+    	/* Update timestamp again for asynchronous devices */
+	recGblGetTimeStamp(prec);
+    }
+
     /* check event list */
     monitor(prec);
     /* process the forward scan link record */
diff --git a/src/rec/stringoutRecord.c b/src/rec/stringoutRecord.c
index 64532a6..6e7a858 100644
--- a/src/rec/stringoutRecord.c
+++ b/src/rec/stringoutRecord.c
@@ -138,18 +138,23 @@ static long process(stringoutRecord *prec)
 		recGblRecordError(S_dev_missingSup,(void *)prec,"write_stringout");
 		return(S_dev_missingSup);
 	}
-        if (!prec->pact
-        && (prec->dol.type != CONSTANT)
-        && (prec->omsl == menuOmslclosed_loop)) {
-		status = dbGetLink(&(prec->dol),
-			DBR_STRING,prec->val,0,0);
-		if(prec->dol.type!=CONSTANT && RTN_SUCCESS(status)) prec->udf=FALSE;
+        if ( !prec->pact ) {
+		if ( (prec->dol.type != CONSTANT)
+		&&   (prec->omsl == menuOmslclosed_loop)) {
+			status = dbGetLink(&(prec->dol), DBR_STRING,prec->val,0,0);
+			if ( RTN_SUCCESS(status) )
+				prec->udf=FALSE;
+		}
+
+		if(prec->udf == TRUE ){
+			recGblSetSevr(prec,UDF_ALARM,INVALID_ALARM);
+		}
+
+		/* Update the timestamp before writing output values so it
+		* will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
-        if(prec->udf == TRUE ){
-                recGblSetSevr(prec,UDF_ALARM,INVALID_ALARM);
-        }
-
         if (prec->nsev < INVALID_ALARM )
                 status=writeValue(prec); /* write the new value */
         else {
@@ -174,9 +179,13 @@ static long process(stringoutRecord *prec)
 
 	/* check if device support set pact */
 	if ( !pact && prec->pact ) return(0);
-
 	prec->pact = TRUE;
-	recGblGetTimeStamp(prec);
+
+	if ( pact ) {
+		/* Update timestamp again for asynchronous devices */
+		recGblGetTimeStamp(prec);
+	}
+
 	monitor(prec);
 	recGblFwdLink(prec);
 	prec->pact=FALSE;

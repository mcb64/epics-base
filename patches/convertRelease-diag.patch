diff --git a/src/tools/convertRelease.pl b/src/tools/convertRelease.pl
index abf63c3..194d522 100644
--- a/src/tools/convertRelease.pl
+++ b/src/tools/convertRelease.pl
@@ -25,10 +25,10 @@ use EPICS::Release;
 
 use vars qw($arch $top $iocroot $root);
 
-our ($opt_a, $opt_t, $opt_T);
+our ($opt_a, $opt_d, $opt_t, $opt_T);
 
 $Getopt::Std::OUTPUT_HELP_VERSION = 1;
-getopts('a:t:T:') or &HELP_MESSAGE;
+getopts('a:dt:T:') or &HELP_MESSAGE;
 
 my $cwd = UnixPath(cwd());
 
@@ -60,6 +60,9 @@ if ($opt_t) {
             chop $iocroot;
             chop $root;
         }
+		if ( $opt_d ) {
+			print "-t option enabled: substituting $iocroot for $root in paths.\n";
+		}
     }
 }
 
@@ -71,10 +74,18 @@ my $outfile = $ARGV[0];
 my %macros = (TOP => LocalPath($top));
 my @apps   = ('TOP');   # Records the order of definitions in RELEASE file
 
+$ENV{MAKEFLAGS} = "";
+
 # Read the RELEASE file(s)
 my $relfile = "$top/configure/RELEASE";
-die "Can't find $relfile" unless (-f $relfile);
+die "convertRelease.pl can't find \$TOP/configure/RELEASE w/ TOP=$top\n" unless (-f $relfile);
 readReleaseFiles($relfile, \%macros, \@apps, $arch);
+if ( $opt_d ) {
+	print "Initial expandRelease call for macros:\n";
+	while ( my ( $macro, $val ) = each %macros ) {
+		print "\t$macro\t=\t$val\n";
+	}
+}
 expandRelease(\%macros, \@apps);
 
 
@@ -94,7 +105,11 @@ for ($outfile) {
 
 sub HELP_MESSAGE {
     print STDERR <<EOF;
-Usage: convertRelease.pl [-a arch] [-T top] [-t ioctop] outfile
+Usage: convertRelease.pl [-a arch] [-d] [-T top] [-t ioctop] outfile
+	-a can be used to specify the architecture, defaults to O.<arch> in current dir
+	-d enables diagnostic output
+	-T can be used to specify \$TOP, defaults to current dir w/ iocBoot/* or configure/* stripped off
+	-t can be used if IOC has a different \$TOP
     where outfile is one of:
         releaseTops - lists the module names defined in RELEASE*s
         dllPath.bat - path changes for cmd.exe to find Windows DLLs
@@ -223,6 +238,12 @@ sub checkRelease {
         my @order = ();
         my $relfile = "$path/configure/RELEASE";
         readReleaseFiles($relfile, \%check, \@order, $arch);
+		if ( $opt_d ) {
+			print "checkRelease checking macros:\n";
+			while ( my ( $macro, $val ) = each %check ) {
+				print "\t$macro\t=\t$val\n";
+			}
+		}
         expandRelease(\%check, \@order);
         delete $check{TOP};
         delete $check{EPICS_HOST_ARCH};
